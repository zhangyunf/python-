1、面向对象的特点：封装、继承、多态
2、静态属性、动态属性、私有属性
3、实例变量、类变量：改变值的时候的变化。
4、多继承顺序
5、多态：一种接口，多种实现
6、初始化方法__init__
   析构方法__del__：在实例释放、销毁的时候执行的，通常用于做一些收尾工作，如关闭一些数据库连接，
          打开临时文件。
7、重写父类方法 super(className, self).__init__(参数)
                People.__init__(参数)
8、静态方法：1、用@staticmethod关键字修饰
             2、只是名义上的关联。和当前类没有什么关系，只是类下的一个函数，实际上是和当前类没有联系的。
             3、只是用当前类的名字调用
9、类方法（@classmethod）：只能访问类变量，不能访问实例变量
10、1)、属性方法(@property)：把一个方法变成一个静态属性
    2）、赋值、删除
    3）、场景：很多时候场景不能通过简单的定义静态属性来实现的。如想知道一个航班当前的状态。
11、类的特殊方法：1）、__doc__查看类的描述信息
                  2)、__module__表示当面操作的对象在哪个模块
                  3)、__class__表示当前操作的对象的类是什么
                  4)、__call__对象后面加()，触发执行。
                  5）、__dict__查看类或对象中的所有成员。通过实例调用，打印所有的实例属性，不包括类属性；通过类调用
                  打印类里所有的属性，不包括实例属性
                  6)、__str__如果一个雷中定义了此方法，那么在打印对象的时候，默认输出此方法的返回值
                  7)、__getutem__、__setitem__、__delitem__将字典封装成一个类
                  8)、__new__用来创建实例的，在调用__init__之前先走的这个方法。
                  9)、__metaclass__
12、**反射：getattr(object, name, defaulr=None):根据字符串去获取obj对象里的方法
          hasattr(object, name)：判断一个对象里是否有对应的字符串的方法
          setattr(x, "y", v):is equivalent to "x.y=v"
          delattr(x, y):删除属性